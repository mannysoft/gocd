/*
 * Copyright 2017 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

let m                                = require('mithril');
let f                                = require('helpers/form_helper');
let tt                               = require('helpers/pipeline_configs/tooltips');
let ParametersConfigWidget           = require('views/pipeline_configs/parameters_config_widget');
let TrackingToolWidget               = require('views/pipeline_configs/tracking_tool_widget');
let EnvironmentVariablesConfigWidget = require('views/pipeline_configs/environment_variables_config_widget');

const ComponentMixins = require('helpers/mithril_component_mixins');
const Stream          = require('mithril/stream');
const s               = require('string-plus');
const _               = require('lodash');


const PipelineSettingsWidget = {
  oninit (vnode) {
    this.args = vnode.attrs;
    ComponentMixins.HasViewModel.call(this);
  },

  view (vnode) {
    const pipeline                    = vnode.attrs.pipeline();
    const pipelineAutoScheduleMessage = pipeline.isFirstStageAutoTriggered() ? 'Automatically triggered' : 'Manually triggered';

    return (
      <f.accordion accordionTitles={[(<span>Pipeline Settings</span>)]}
                   accordionKeys={['pipeline-settings']}
                   selectedIndex={vnode.state.vmState('pipelineSettingsSelected', Stream(-1))}
                   class='pipeline-settings'>
        <div>
          <f.row>
            <f.column size={4} largeSize={4}>
              <f.input model={pipeline}
                       attrName="labelTemplate"
                       label={[
                         <span class="required">Label template</span>,
                         <f.tooltip tooltip={{content: <tt.pipeline.labelTemplate callback={pipeline.labelTemplate}/>, size: "large"}} model={pipeline} attrName="labelTemplate" />
                       ]}
                       validate />

              <f.input model={pipeline.timer()}
                       attrName="spec"
                       label={[
                         "Cron timer specification",
                         <f.tooltip tooltip={{content: <tt.pipeline.timer.spec callback={pipeline.timer().spec}/>, size: "large"}} model={pipeline.timer()} attrName="spec" />
                       ]}
                       validate />
            </f.column>
            <f.column size={5} largeSize={5}>
              <label>
                Pipeline locking behavior
                <f.tooltip tooltip={{content: tt.pipeline.lockBehavior}} />
              </label>

              <label>
                <input type="radio"
                       name="lockBehavior"
                       id="lockBehavior-unlockWhenFinished"
                       checked={pipeline.lockBehavior() === "unlockWhenFinished"}
                       onchange={pipeline.lockBehavior.bind(pipeline, "unlockWhenFinished")} />
                Run single instance of pipeline at a time
                <f.tooltip tooltip={{content: tt.pipeline.lockBehaviorUnlockWhenFinished}} />
              </label>

              <label>
                <input type="radio"
                       name="lockBehavior"
                       id="lockBehavior-lockOnFailure"
                       checked={pipeline.lockBehavior() === "lockOnFailure"}
                       onchange={pipeline.lockBehavior.bind(pipeline, "lockOnFailure")} />
                Run single instance of pipeline and lock on failure
                <f.tooltip tooltip={{content: tt.pipeline.lockBehaviorLockOnFailure}} />
              </label>

              <label>
                <input type="radio"
                       name="lockBehavior"
                       id="lockBehavior-none"
                       checked={pipeline.lockBehavior() === "none"}
                       onchange={pipeline.lockBehavior.bind(pipeline, "none")} />
                Run multiple instances (default)
                <f.tooltip tooltip={{content: tt.pipeline.lockBehaviorNone}} />
              </label>
            </f.column>

            <f.column size={3} largeSize={3} end>
              <label class="pipeline-schedule">
                {pipelineAutoScheduleMessage}
                <f.tooltip tooltip={{
                  content:   pipeline.isFirstStageAutoTriggered() ? tt.pipeline.automaticPipelineScheduling : tt.pipeline.manualPipelineScheduling,
                  size:      'small'
                }}/>
              </label>

              <div class="pipeline-schedule-run-on-new-material">
                <f.checkbox model={pipeline.timer()}
                            attrName='onlyOnChanges'
                            label={[
                              'Run only on new material',
                              <f.tooltip tooltip={{content: tt.pipeline.timer.onlyOnChanges}} />
                            ]}
                            disabled={s.isBlank(pipeline.timer().spec())} />
              </div>
            </f.column>
          </f.row>
          <f.row>
            <TrackingToolWidget trackingTool={pipeline.trackingTool}
                                vm={vnode.state.vmState('trackingToolConfig')}
                                key={_.result(pipeline.trackingTool(), 'uuid', 'tracking-tool-none')}/>
            <ParametersConfigWidget parameters={pipeline.parameters}
                                    key={pipeline.parameters().uuid()}
                                    vm={vnode.state.vmState('parametersConfig')}/>
            <EnvironmentVariablesConfigWidget title='Pipeline Environment Variables'
                                              variables={pipeline.environmentVariables}
                                              key={pipeline.environmentVariables().uuid()}
                                              vm={vnode.state.vmState('environmentVariablesConfig')}/>
          </f.row>
        </div>
      </f.accordion>
    );
  }
};
module.exports               = PipelineSettingsWidget;
