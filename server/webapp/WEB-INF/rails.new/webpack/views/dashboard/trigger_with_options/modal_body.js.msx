/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m = require('mithril');
const _ = require('lodash');

const MaterialsForTriggerWidget  = require('views/dashboard/trigger_with_options/materials_widget');
const EnvironmentVariablesWidget = require('views/dashboard/trigger_with_options/environment_variables_widget');

const ModalBody = {
  oninit(vnode) {
    const self = vnode.state;

    self.visibilityClassForTab = (tabKey) => {
      return vnode.attrs.vm().isTabSelected(tabKey) ? 'active' : '';
    };

    self.visibilityClassForContent = (tabKey) => {
      return vnode.attrs.vm().isTabSelected(tabKey) ? '' : 'hidden';
    };
  },


  view(vnode) {
    let secureVarsTabContent, environmentVarsTabContent, secureVarsTab, environmentVarsTab;

    const self = vnode.state;
    const vm   = vnode.attrs.vm();
    const info = vnode.attrs.triggerWithOptionsInfo;

    if (!info()) {
      return (
        <div class="pipeline-trigger-with-options">
          <div class="page-spinner"/>
        </div>
      );
    }

    const materialsKey = vm.MATERIALS_TAB_KEY;
    const envKey       = vm.ENVIRONMENT_VARIABLES_TAB_KEY;
    const secureEnvKey = vm.SECURE_ENVIRONMENT_VARIABLES_TAB_KEY;

    const showPlainTextVars = !_.isEmpty(info().plainTextVariables);
    const showSecureVars    = !_.isEmpty(info().secureVariables);

    if (showPlainTextVars) {
      environmentVarsTab        = (
        <li class={self.visibilityClassForTab(envKey)} onclick={vm.selectTab.bind(vm, envKey)}>
          Environment variables
        </li>
      );
      environmentVarsTabContent = (
        <div class={`h-tab_content ${self.visibilityClassForContent(envKey)}`}>
          <EnvironmentVariablesWidget.Plain variables={info().plainTextVariables}/>
        </div>
      );

    }

    if (showSecureVars) {
      secureVarsTab = (
        <li class={self.visibilityClassForTab(secureEnvKey)} onclick={vm.selectTab.bind(vm, secureEnvKey)}>
          Secure Environment variables
        </li>
      );

      secureVarsTabContent = (
        <div class={`h-tab_content ${self.visibilityClassForContent(secureEnvKey)}`}>
          <EnvironmentVariablesWidget.Secure variables={info().secureVariables}/>
        </div>
      );
    }

    return (
      <div class="h-tab pipeline-trigger-with-options">
        <ul class="h-tab_tab-head pipeline_options-heading">
          <li class={self.visibilityClassForTab(materialsKey)}
              onclick={vm.selectTab.bind(vm, materialsKey)}>
            Materials
          </li>
          {environmentVarsTab}
          {secureVarsTab}
        </ul>

        <div class="h-tab_container pipeline_options-body">
          <div class={`h-tab_content ${self.visibilityClassForContent(materialsKey)}`}>
            <MaterialsForTriggerWidget materials={info().materials}
                                       searchVM={vnode.attrs.searchVM}
                                       vm={vnode.attrs.vm}/>
          </div>
          {environmentVarsTabContent}
          {secureVarsTabContent}
        </div>
      </div>
    );
  }
};

module.exports = ModalBody;
